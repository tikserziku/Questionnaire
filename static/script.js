document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const voiceButton = document.getElementById('voice-button');
    const voiceQuestionInput = document.getElementById('voice_question');
    const chatButton = document.getElementById('chatgpt-button');
    const chatModal = document.getElementById('chatgpt-modal');
    const chatInput = document.getElementById('chatgpt-input');
    const chatSend = document.getElementById('chatgpt-send');
    const chatContainer = document.getElementById('chatgpt-chat');
    const chatgptQuestionsInput = document.getElementById('chatgpt_questions');
    const loadingIndicator = document.getElementById('loading-indicator');
    const closeModalBtn = document.querySelector('.close');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    let recognition = null;
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        recognition = new (window.webkitSpeechRecognition || window.SpeechRecognition)();
        recognition.lang = 'ru-RU';
        recognition.continuous = false;
        recognition.interimResults = false;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        recognition.onresult = async (event) => {
            const transcript = event.results[0][0].transcript;
            loadingIndicator.style.display = 'block';

            try {
                const response = await fetch('/process_voice', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ voice_input: transcript })
                });

                if (!response.ok) throw new Error('Network response was not ok');
                
                const data = await response.json();
                
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–ª–∏ textarea
                const activeElement = document.activeElement;
                let targetInput;
                
                if (activeElement.tagName === 'TEXTAREA' || activeElement.tagName === 'INPUT') {
                    targetInput = activeElement;
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º–µ
                    const inputs = document.querySelectorAll('textarea, input[type="text"]');
                    targetInput = inputs[inputs.length - 1];
                }

                if (targetInput) {
                    targetInput.value = data.processed_question;
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    voiceQuestionInput.value = JSON.stringify({
                        original: transcript,
                        processed: data.processed_question,
                        timestamp: new Date().toISOString()
                    });
                }

            } catch (error) {
                console.error('Voice processing error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            } finally {
                loadingIndicator.style.display = 'none';
                voiceButton.disabled = false;
                voiceButton.innerHTML = 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥';
            }
        };

        recognition.onerror = (event) => {
            console.error('Speech recognition error:', event.error);
            alert('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            voiceButton.disabled = false;
            voiceButton.innerHTML = 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥';
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        voiceButton.addEventListener('click', () => {
            voiceButton.disabled = true;
            voiceButton.innerHTML = 'üé§ –°–ª—É—à–∞—é...';
            recognition.start();
        });
    } else {
        voiceButton.style.display = 'none';
        console.log('Speech recognition not supported');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChatGPT –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    let isProcessing = false;
    
    const toggleModal = (show) => {
        chatModal.style.display = show ? 'block' : 'none';
        if (show) chatInput.focus();
    };

    chatButton.addEventListener('click', () => toggleModal(true));
    closeModalBtn.addEventListener('click', () => toggleModal(false));
    window.addEventListener('click', (e) => {
        if (e.target === chatModal) toggleModal(false);
    });

    const appendMessage = (message, isUser = false) => {
        const messageDiv = document.createElement('div');
        messageDiv.className = isUser ? 'user-message' : 'bot-message';
        messageDiv.textContent = message;
        chatContainer.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ChatGPT
    const handleChatSubmit = async () => {
        if (isProcessing) return;

        const message = chatInput.value.trim();
        if (!message) return;

        try {
            isProcessing = true;
            loadingIndicator.style.display = 'block';
            chatInput.value = '';
            appendMessage(message, true);

            const response = await fetch('/chatgpt', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message })
            });

            if (!response.ok) throw new Error('Network response was not ok');

            const data = await response.json();
            appendMessage(data.reply);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
            const currentDialogs = chatgptQuestionsInput.value;
            const newDialog = `Q: ${message}\nA: ${data.reply}\n---\n`;
            chatgptQuestionsInput.value = currentDialogs + newDialog;

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
            if (message.toLowerCase().includes('–ø–æ–º–æ–≥') || 
                message.toLowerCase().includes('—Å—Ñ–æ—Ä–º—É–ª–∏—Ä')) {
                if (confirm('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–µ?')) {
                    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    const activeElement = document.activeElement;
                    let targetInput;
                    
                    if (activeElement.tagName === 'TEXTAREA' || activeElement.tagName === 'INPUT') {
                        targetInput = activeElement;
                    } else {
                        const inputs = document.querySelectorAll('textarea, input[type="text"]');
                        targetInput = inputs[inputs.length - 1];
                    }

                    if (targetInput) {
                        targetInput.value = data.reply;
                    }
                }
            }

        } catch (error) {
            console.error('ChatGPT error:', error);
            appendMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', false);
        } finally {
            isProcessing = false;
            loadingIndicator.style.display = 'none';
        }
    };

    chatSend.addEventListener('click', handleChatSubmit);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleChatSubmit();
        }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ñ–æ—Ä–º—ã
    const form = document.getElementById('survey-form');
    if (form) {
        form.addEventListener('submit', (e) => {
            const requiredInputs = form.querySelectorAll('[required]');
            let isValid = true;

            requiredInputs.forEach(input => {
                if (!input.value.trim()) {
                    isValid = false;
                    input.classList.add('error');
                    setTimeout(() => input.classList.remove('error'), 3000);
                }
            });

            if (!isValid) {
                e.preventDefault();
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            }
        });
    }
});
